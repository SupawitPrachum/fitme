        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });
    } catch {
      return new Date().toDateString();
    }
  }, []);

  const getGoalInThai = (goal?: string | null): string => {
    const goalMap: { [key: string]: string } = {
      lose_weight: '‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
      gain_weight: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
      maintain_weight: '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
      build_muscle: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠',
      improve_health: '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
      maintain_shape: '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á',
      general_fitness: '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      maintain_health: '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
    };
    return goal ? goalMap[goal] ?? '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' : '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û';
  };

  const roleLabel = userProfile?.is_admin ? '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (Admin)' : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';
  const roleStyle = userProfile?.is_admin ? styles.adminBadge : styles.userBadge;

  type QuickActionCardProps = {
    title: string;
    subtitle?: string;
    icon: string;
    color: string;
    onPress: () => void;
    isLarge?: boolean;
  };

  const QuickActionCard = ({ title, subtitle, icon, color, onPress, isLarge = false }: QuickActionCardProps) => {
    const cardStyle = isLarge
      ? [styles.quickActionCardBase, styles.quickActionCardLarge, styles.largeCard, { backgroundColor: color }]
      : [styles.quickActionCardBase, styles.quickActionCardSmall, { backgroundColor: color }];

    return (
      <Pressable
        style={cardStyle}
        accessibilityRole="button"
        accessibilityLabel={title}
        onPress={onPress}
      >
        <View style={styles.cardContent}>
          <Text style={styles.cardIcon}>{icon}</Text>
          <View style={styles.cardTextContainer}>
            <Text style={styles.cardTitle}>{title}</Text>
            {subtitle && <Text style={styles.cardSubtitle}>{subtitle}</Text>}
          </View>
        </View>
        <View style={styles.cardArrow}>
          <Text style={styles.arrowText}>‚Ä∫</Text>
        </View>
      </Pressable>
    );
  };

  type StatsCardProps = {
    value: string;
    label: string;
    trend?: string;
    color: string;
  };

  const StatsCard = ({ value, label, trend, color }: StatsCardProps) => (
    <View style={[styles.statsCard, { borderLeftColor: color }]}>
      <Text style={styles.statsValue}>{value}</Text>
      <Text style={styles.statsLabel}>{label}</Text>
      {trend && <Text style={[styles.statsTrend, { color }]}>{trend}</Text>}
    </View>
  );

  if (loading) {
    return (
      <LinearGradient colors={['#f8fafc', '#ffffff', '#f1f5f9']} style={[styles.container, styles.webCenterWrap, isWeb && styles.webContainer]}>
        <View style={[styles.loadingContainer, isWeb && styles.webInner]}>
          <Text style={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</Text>
        </View>
      </LinearGradient>
    );
  }

  const bmi = calculateBMI(userProfile?.weight_kg ?? undefined, userProfile?.height_cm ?? undefined);
  const dailyCalories = userProfile ? calculateDailyCalories(userProfile) : 2000;

  return (
    <>
      {/* ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ StatusBar */}
      {Platform.OS !== 'web' && <StatusBar barStyle="dark-content" backgroundColor="#ffffff" />}

      <SafeAreaView style={[styles.container, styles.webCenterWrap, isWeb && styles.webContainer]}>
        <LinearGradient colors={['#f8fafc', '#ffffff', '#f1f5f9']} style={[styles.container, styles.webInner, isWide ? styles.desktopPadding : undefined]}>
          <ScrollView
            contentContainerStyle={[styles.scrollContent, isWeb && { paddingBottom: 40 }]}
            showsVerticalScrollIndicator={isWeb}
            refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
          >
            {/* Header */}
            <Animated.View style={[styles.header, isWeb && styles.headerWeb, { opacity: fadeAnim }]}>
              <View style={styles.headerTop}>
                <View>
                  <Text style={[styles.greeting, isWeb && styles.greetingWeb]}>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {getDisplayName()}</Text>
                  <Text style={[styles.date, isWeb && styles.dateWeb]}>{todayString}</Text>
                  <View style={styles.roleWrap}>
                    <Text style={[styles.roleBadge, roleStyle]}>{roleLabel}</Text>
                  </View>
                </View>
                <Pressable
                  style={styles.profileButton}
                  accessibilityRole="button"
                  accessibilityLabel="‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                  onPress={() => router.push('/(tabs)/Profile')}
                >
                  <Text style={styles.profileIcon}>üë§</Text>
                </Pressable>
              </View>

              <View style={[styles.titleSection, isWeb && { alignItems: 'flex-start' }]}>
                <Text style={[styles.mainTitle, isWeb && styles.mainTitleWeb]}>FitMe Dashboard</Text>
              <Text style={styles.subtitle}>üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {userProfile?.goal ? getGoalInThai(userProfile.goal) : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}</Text>
                <View style={styles.chipsRow}>
                  <Text style={styles.chip}>BMI: {bmi ?? '-'}</Text>
                  <Text style={styles.chip}>‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: {dailyCalories}</Text>
                  <Text style={styles.chip}>‡∏ô‡πâ‡∏≥: {userProfile?.water_goal_l ?? 2} L</Text>
                </View>
              </View>
            </Animated.View>

            {/* Today Quick Start */}
            <View style={[styles.todaySection, isWeb && { paddingHorizontal: 0 }]}>
              {todayPlan ? (
                <Pressable
                  onPress={()=>router.push({ pathname:'/(tabs)/StartWorkout', params:{ planId: String(todayPlan.planId), dayId: String(todayPlan.dayId) }})}
                  accessibilityRole="button"
                  accessibilityLabel="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
                  style={({ pressed }) => [{ opacity: pressed ? 0.96 : 1 }]}
                >
                  <LinearGradient colors={["#131314ff","#8b5cf6"]} start={{x:0,y:0}} end={{x:1,y:1}} style={[styles.todayCardGrad, isWeb && styles.cardShadowWeb]}>
                    <View style={{flex:1}}>
                      <Text style={styles.todayTitle}>‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</Text>
                      <Text style={styles.todaySub}>{todayPlan.title ?? '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢'} ‚Ä¢ {todayPlan.focus ?? 'Full-Body'}</Text>
                    </View>
                    <View style={styles.todayBtn}><Text style={styles.todayBtnText}>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‚Ä∫</Text></View>
                  </LinearGradient>
                </Pressable>
              ) : (
                <View style={[styles.todayEmpty, isWeb && styles.cardShadowWeb]}>
                  <Text style={styles.todayEmptyText}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏û‡∏•‡∏ô ‚Ä¢ ‡πÄ‡∏£‡∏¥‡πà‡∏° Onboarding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏û‡∏•‡∏ô</Text>
                  <Pressable
                    accessibilityRole="button"
                    accessibilityLabel="‡πÄ‡∏£‡∏¥‡πà‡∏° Onboarding"
                    onPress={()=>router.push('/(tabs)/WorkoutPlanDetail')}
                    style={({ pressed }) => [styles.todayCreate, { opacity: pressed ? 0.9 : 1 }]}
                  >
                    <Text style={styles.todayCreateText}>‡πÄ‡∏£‡∏¥‡πà‡∏° Onboarding</Text>
                  </Pressable>
                </View>
              )}
            </View>

            {/* Quick Stats */}
            <Animated.View style={[styles.statsSection, { opacity: fadeAnim }]}>
              <Text style={[styles.sectionTitle, isWeb && { paddingHorizontal: 0 }]}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</Text>
              <View style={[styles.statsGrid, isWeb && styles.statsGridWeb]}>
                <StatsCard value={userProfile?.weight_kg ? `${userProfile.weight_kg} ‡∏Å‡∏Å.` : '-'} label="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å" color="#3b82f6" />
                <StatsCard
                  value={bmi ? `${bmi}` : '-'}
                  label="BMI"
                  trend={bmi ? (bmi < 18.5 ? '‡∏ï‡πà‡∏≥' : bmi > 24.9 ? '‡∏™‡∏π‡∏á' : '‡∏õ‡∏Å‡∏ï‡∏¥') : undefined}
                  color={bmi ? (bmi < 18.5 || bmi > 24.9 ? '#ef4444' : '#10b981') : '#6b7280'}
                />
                <StatsCard value={`${dailyCalories}`} label="‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà/‡∏ß‡∏±‡∏ô" color="#f59e0b" />
              </View>

              <View style={[styles.statsGrid, { marginTop: 12 }, isWeb && styles.statsGridWeb]}>
                <StatsCard value={userProfile?.height_cm ? `${userProfile.height_cm} ‡∏ã‡∏°.` : '-'} label="‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á" color="#8b5cf6" />
                <StatsCard value={userProfile?.water_goal_l ? `${userProfile.water_goal_l} ‡∏•‡∏¥‡∏ï‡∏£` : '2.0 ‡∏•‡∏¥‡∏ï‡∏£'} label="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡πâ‡∏≥" color="#06b6d4" />
                <StatsCard
                  value={
                    userProfile?.activity_level
                      ? String(userProfile.activity_level).replace(/_/g, ' ')
                      : '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'
                  }
                  label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
                  color="#10b981"
                />
              </View>
            </Animated.View>

            {/* Quick Actions */}
            <Animated.View style={[styles.quickActions, { opacity: fadeAnim }]}>
              <Text style={[styles.sectionTitle, isWeb && { paddingHorizontal: 0 }]}>‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å</Text>

              {/* Large Feature Card */}
              <QuickActionCard
                title="AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
                subtitle="‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å AI ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"
                icon="ü§ñ"
                color="#6366f1"
                isLarge
                onPress={() => router.push('/(tabs)/AIRecommendationScreen')}
              />

              {/* Grid of smaller cards */}
              <View style={[styles.actionGrid, isWeb && styles.actionGridWeb]}>
                <QuickActionCard
                  title="‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà"
                  icon="üî•"
                  color="#ef4444"
                  onPress={() => router.push('/(tabs)/CalorieTrackerScreen')}
                />

                <QuickActionCard
                  title="‡πÅ‡∏û‡∏•‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á"
                  icon="üí™"
                  color="#10b981"
                  onPress={() => router.push('/(tabs)/WorkoutProgram')}
                />

                <QuickActionCard
                  title="‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" icon="‚öôÔ∏è"
                  color="#f59e0b"
                  onPress={() => router.push('/(tabs)/EditProfile')}
                />
                <QuickActionCard
                  title="‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥"
                  icon="üíß"
                  color="#06b6d4"
                  onPress={() => router.push('/(tabs)/WaterTracker')}
                />
                <QuickActionCard
                  title="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û" icon="üìä"
                  color="#8b5cf6"
                  onPress={() => router.push('/(tabs)/StatsScreen')}
                />
              </View>
            </Animated.View>

            {/* Health Condition Alert */}
            {userProfile?.health_condition ? (
              <Animated.View style={[styles.healthAlert, { opacity: fadeAnim }]}>
                <View style={[styles.alertCard, isWeb && styles.cardShadowWeb]}>
                  <View style={styles.alertHeader}>
                    <Text style={styles.alertIcon}>‚ö†Ô∏è</Text>
                    <Text style={styles.alertTitle}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</Text>
                  </View>
